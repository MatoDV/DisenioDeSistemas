Consigna---------------------------------------------------------

Vamos a simular un sistema de notificación que permite enviar mensajes a través de diferentes canales, como correo electrónico,
 SMS y notificaciones push. Para implementar esta funcionalidad, utiliza el patrón Decorator.
 Define una interfaz base llamada Notificacion que tenga un método enviar_mensaje(mensaje: str).
 Crea una clase concreta llamada NotificacionBase que implemente la interfaz Notificacion.
 Esta clase representará la funcionalidad básica de enviar un mensaje.
 Crea clases decoradoras para cada tipo de canal de notificación: CorreoElectronico, SMS y NotificacionPush.
 Estas clases deben extender la clase NotificacionDecorator, que es una clase abstracta que implementa Notificacion.
 Cada clase decoradora debe agregar su propia funcionalidad al mensaje básico, como agregar encabezados para correo electrónico, prefijos para SMS, etc.Finalmente,
 crea un cliente de prueba que demuestre cómo se puede utilizar este sistema de notificación. Crea instancias de cada tipo de notificación decorada y envía un mensaje a través de cada una.


Definicion-------------------------------------------------------

El patrón Decorator se utiliza cuando necesitas añadir funcionalidades adicionales a objetos existentes de forma dinámica y flexible sin alterar su estructura básica.
Proporciona una alternativa a la herencia subclasificada para extender el comportamiento de los objetos.

Componente: Es la interfaz común o clase abstracta que define la funcionalidad básica que puede ser extendida o decorada.

Componente Concreto: Es la implementación básica del componente que deseas decorar.

Decorador: Es una clase abstracta que implementa la interfaz del componente y contiene una instancia del componente. Este es el núcleo del patrón Decorator.
Añade funcionalidades adicionales al componente base.

Decorador Concreto: Es una implementación concreta del decorador que añade funcionalidades adicionales al objeto envuelto por el decorador.